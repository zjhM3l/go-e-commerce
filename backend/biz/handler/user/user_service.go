// Code generated by hertz generator.

package user

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	user "github.com/zjhM3l/go-e-commerce/biz/model/user"
)

// Register 用户注册
// @router /user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterReq

	// 绑定并验证请求数据
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 示例逻辑：检查密码确认
	if req.Password != req.ConfirmPassword {
		c.String(consts.StatusBadRequest, "Passwords do not match")
		return
	}

	// 示例逻辑：生成用户 ID
	userID := 123 // TODO: 实际逻辑可以从数据库中生成或保存用户

	// 构建响应
	resp := &user.RegisterResp{
		UserID: int32(userID),
	}
	c.JSON(consts.StatusOK, resp)
}

// Login 用户登录
// @router /user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginReq

	// 绑定并验证请求数据
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 示例逻辑：验证用户邮箱和密码
	if req.Email == "test@example.com" && req.Password == "password" {
		// 模拟用户 ID
		userID := 123

		// 构建响应
		resp := &user.LoginResp{
			UserID: int32(userID),
		}
		c.JSON(consts.StatusOK, resp)
	} else {
		c.String(consts.StatusUnauthorized, "Invalid email or password")
	}
}
