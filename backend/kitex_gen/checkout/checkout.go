// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package checkout

import (
	"context"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"github.com/zjhM3l/go-e-commerce/kitex_gen/payment"
	"strings"
)

type Address struct {
	StreetAddress string `thrift:"street_address,1" frugal:"1,default,string" json:"street_address"`
	City          string `thrift:"city,2" frugal:"2,default,string" json:"city"`
	State         string `thrift:"state,3" frugal:"3,default,string" json:"state"`
	Country       string `thrift:"country,4" frugal:"4,default,string" json:"country"`
	ZipCode       string `thrift:"zip_code,5" frugal:"5,default,string" json:"zip_code"`
}

func NewAddress() *Address {
	return &Address{}
}

func (p *Address) InitDefault() {
}

func (p *Address) GetStreetAddress() (v string) {
	return p.StreetAddress
}

func (p *Address) GetCity() (v string) {
	return p.City
}

func (p *Address) GetState() (v string) {
	return p.State
}

func (p *Address) GetCountry() (v string) {
	return p.Country
}

func (p *Address) GetZipCode() (v string) {
	return p.ZipCode
}
func (p *Address) SetStreetAddress(val string) {
	p.StreetAddress = val
}
func (p *Address) SetCity(val string) {
	p.City = val
}
func (p *Address) SetState(val string) {
	p.State = val
}
func (p *Address) SetCountry(val string) {
	p.Country = val
}
func (p *Address) SetZipCode(val string) {
	p.ZipCode = val
}

var fieldIDToName_Address = map[int16]string{
	1: "street_address",
	2: "city",
	3: "state",
	4: "country",
	5: "zip_code",
}

func (p *Address) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Address[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Address) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StreetAddress = _field
	return nil
}
func (p *Address) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.City = _field
	return nil
}
func (p *Address) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.State = _field
	return nil
}
func (p *Address) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Country = _field
	return nil
}
func (p *Address) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ZipCode = _field
	return nil
}

func (p *Address) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Address"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Address) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("street_address", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StreetAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Address) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.City); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Address) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("state", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.State); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Address) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("country", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Country); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Address) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("zip_code", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ZipCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Address) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Address(%+v)", *p)

}

func (p *Address) DeepEqual(ano *Address) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StreetAddress) {
		return false
	}
	if !p.Field2DeepEqual(ano.City) {
		return false
	}
	if !p.Field3DeepEqual(ano.State) {
		return false
	}
	if !p.Field4DeepEqual(ano.Country) {
		return false
	}
	if !p.Field5DeepEqual(ano.ZipCode) {
		return false
	}
	return true
}

func (p *Address) Field1DeepEqual(src string) bool {

	if strings.Compare(p.StreetAddress, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field2DeepEqual(src string) bool {

	if strings.Compare(p.City, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field3DeepEqual(src string) bool {

	if strings.Compare(p.State, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Country, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ZipCode, src) != 0 {
		return false
	}
	return true
}

type CheckoutReq struct {
	UserId     int32                   `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	Firstname  string                  `thrift:"firstname,2" frugal:"2,default,string" json:"firstname"`
	Lastname   string                  `thrift:"lastname,3" frugal:"3,default,string" json:"lastname"`
	Email      string                  `thrift:"email,4" frugal:"4,default,string" json:"email"`
	Address    *Address                `thrift:"address,5" frugal:"5,default,Address" json:"address"`
	CreditCard *payment.CreditCardInfo `thrift:"credit_card,6" frugal:"6,default,payment.CreditCardInfo" json:"credit_card"`
}

func NewCheckoutReq() *CheckoutReq {
	return &CheckoutReq{}
}

func (p *CheckoutReq) InitDefault() {
}

func (p *CheckoutReq) GetUserId() (v int32) {
	return p.UserId
}

func (p *CheckoutReq) GetFirstname() (v string) {
	return p.Firstname
}

func (p *CheckoutReq) GetLastname() (v string) {
	return p.Lastname
}

func (p *CheckoutReq) GetEmail() (v string) {
	return p.Email
}

var CheckoutReq_Address_DEFAULT *Address

func (p *CheckoutReq) GetAddress() (v *Address) {
	if !p.IsSetAddress() {
		return CheckoutReq_Address_DEFAULT
	}
	return p.Address
}

var CheckoutReq_CreditCard_DEFAULT *payment.CreditCardInfo

func (p *CheckoutReq) GetCreditCard() (v *payment.CreditCardInfo) {
	if !p.IsSetCreditCard() {
		return CheckoutReq_CreditCard_DEFAULT
	}
	return p.CreditCard
}
func (p *CheckoutReq) SetUserId(val int32) {
	p.UserId = val
}
func (p *CheckoutReq) SetFirstname(val string) {
	p.Firstname = val
}
func (p *CheckoutReq) SetLastname(val string) {
	p.Lastname = val
}
func (p *CheckoutReq) SetEmail(val string) {
	p.Email = val
}
func (p *CheckoutReq) SetAddress(val *Address) {
	p.Address = val
}
func (p *CheckoutReq) SetCreditCard(val *payment.CreditCardInfo) {
	p.CreditCard = val
}

var fieldIDToName_CheckoutReq = map[int16]string{
	1: "user_id",
	2: "firstname",
	3: "lastname",
	4: "email",
	5: "address",
	6: "credit_card",
}

func (p *CheckoutReq) IsSetAddress() bool {
	return p.Address != nil
}

func (p *CheckoutReq) IsSetCreditCard() bool {
	return p.CreditCard != nil
}

func (p *CheckoutReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *CheckoutReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Firstname = _field
	return nil
}
func (p *CheckoutReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Lastname = _field
	return nil
}
func (p *CheckoutReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Email = _field
	return nil
}
func (p *CheckoutReq) ReadField5(iprot thrift.TProtocol) error {
	_field := NewAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Address = _field
	return nil
}
func (p *CheckoutReq) ReadField6(iprot thrift.TProtocol) error {
	_field := payment.NewCreditCardInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CreditCard = _field
	return nil
}

func (p *CheckoutReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CheckoutReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckoutReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("firstname", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Firstname); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CheckoutReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("lastname", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Lastname); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CheckoutReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Email); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CheckoutReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("address", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Address.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CheckoutReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("credit_card", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.CreditCard.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CheckoutReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutReq(%+v)", *p)

}

func (p *CheckoutReq) DeepEqual(ano *CheckoutReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Firstname) {
		return false
	}
	if !p.Field3DeepEqual(ano.Lastname) {
		return false
	}
	if !p.Field4DeepEqual(ano.Email) {
		return false
	}
	if !p.Field5DeepEqual(ano.Address) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreditCard) {
		return false
	}
	return true
}

func (p *CheckoutReq) Field1DeepEqual(src int32) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *CheckoutReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Firstname, src) != 0 {
		return false
	}
	return true
}
func (p *CheckoutReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Lastname, src) != 0 {
		return false
	}
	return true
}
func (p *CheckoutReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *CheckoutReq) Field5DeepEqual(src *Address) bool {

	if !p.Address.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CheckoutReq) Field6DeepEqual(src *payment.CreditCardInfo) bool {

	if !p.CreditCard.DeepEqual(src) {
		return false
	}
	return true
}

type CheckoutResp struct {
	OrderId       string `thrift:"order_id,1" frugal:"1,default,string" json:"order_id"`
	TransactionId string `thrift:"transaction_id,2" frugal:"2,default,string" json:"transaction_id"`
}

func NewCheckoutResp() *CheckoutResp {
	return &CheckoutResp{}
}

func (p *CheckoutResp) InitDefault() {
}

func (p *CheckoutResp) GetOrderId() (v string) {
	return p.OrderId
}

func (p *CheckoutResp) GetTransactionId() (v string) {
	return p.TransactionId
}
func (p *CheckoutResp) SetOrderId(val string) {
	p.OrderId = val
}
func (p *CheckoutResp) SetTransactionId(val string) {
	p.TransactionId = val
}

var fieldIDToName_CheckoutResp = map[int16]string{
	1: "order_id",
	2: "transaction_id",
}

func (p *CheckoutResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OrderId = _field
	return nil
}
func (p *CheckoutResp) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransactionId = _field
	return nil
}

func (p *CheckoutResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CheckoutResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckoutResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transaction_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransactionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CheckoutResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutResp(%+v)", *p)

}

func (p *CheckoutResp) DeepEqual(ano *CheckoutResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrderId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TransactionId) {
		return false
	}
	return true
}

func (p *CheckoutResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.OrderId, src) != 0 {
		return false
	}
	return true
}
func (p *CheckoutResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TransactionId, src) != 0 {
		return false
	}
	return true
}

type CheckoutService interface {
	Checkout(ctx context.Context, request *CheckoutReq) (r *CheckoutResp, err error)
}

type CheckoutServiceCheckoutArgs struct {
	Request *CheckoutReq `thrift:"request,1" frugal:"1,default,CheckoutReq" json:"request"`
}

func NewCheckoutServiceCheckoutArgs() *CheckoutServiceCheckoutArgs {
	return &CheckoutServiceCheckoutArgs{}
}

func (p *CheckoutServiceCheckoutArgs) InitDefault() {
}

var CheckoutServiceCheckoutArgs_Request_DEFAULT *CheckoutReq

func (p *CheckoutServiceCheckoutArgs) GetRequest() (v *CheckoutReq) {
	if !p.IsSetRequest() {
		return CheckoutServiceCheckoutArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *CheckoutServiceCheckoutArgs) SetRequest(val *CheckoutReq) {
	p.Request = val
}

var fieldIDToName_CheckoutServiceCheckoutArgs = map[int16]string{
	1: "request",
}

func (p *CheckoutServiceCheckoutArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CheckoutServiceCheckoutArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutServiceCheckoutArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutServiceCheckoutArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCheckoutReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CheckoutServiceCheckoutArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Checkout_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutServiceCheckoutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckoutServiceCheckoutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutServiceCheckoutArgs(%+v)", *p)

}

func (p *CheckoutServiceCheckoutArgs) DeepEqual(ano *CheckoutServiceCheckoutArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *CheckoutServiceCheckoutArgs) Field1DeepEqual(src *CheckoutReq) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type CheckoutServiceCheckoutResult struct {
	Success *CheckoutResp `thrift:"success,0,optional" frugal:"0,optional,CheckoutResp" json:"success,omitempty"`
}

func NewCheckoutServiceCheckoutResult() *CheckoutServiceCheckoutResult {
	return &CheckoutServiceCheckoutResult{}
}

func (p *CheckoutServiceCheckoutResult) InitDefault() {
}

var CheckoutServiceCheckoutResult_Success_DEFAULT *CheckoutResp

func (p *CheckoutServiceCheckoutResult) GetSuccess() (v *CheckoutResp) {
	if !p.IsSetSuccess() {
		return CheckoutServiceCheckoutResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CheckoutServiceCheckoutResult) SetSuccess(x interface{}) {
	p.Success = x.(*CheckoutResp)
}

var fieldIDToName_CheckoutServiceCheckoutResult = map[int16]string{
	0: "success",
}

func (p *CheckoutServiceCheckoutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckoutServiceCheckoutResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutServiceCheckoutResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutServiceCheckoutResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCheckoutResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CheckoutServiceCheckoutResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Checkout_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutServiceCheckoutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CheckoutServiceCheckoutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutServiceCheckoutResult(%+v)", *p)

}

func (p *CheckoutServiceCheckoutResult) DeepEqual(ano *CheckoutServiceCheckoutResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CheckoutServiceCheckoutResult) Field0DeepEqual(src *CheckoutResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
